#!/usr/bin/env python
"""

Written by Tiger Sachse.
"""
import time
import json
import rospy
import rostest
import httplib
import unittest
import threading
import std_msgs.msg
import geometry_msgs.msg


#
PACKAGE_NAME = "ezrassor_controller_server"
DEFAULT_TEST_NAME = "test_controller_server"
POST_HEADER = {
    "content-type" : "application/json",
}


class Instruction():
    """"""
    def __init__(self):
        """"""
        self.__content = None
        self.__content_is_new = False
        self.__content_lock = threading.Lock()

    def update(self, content):
        """"""
        self.__content_lock.acquire()
        self.__content_is_new = True
        self.__content = content
        self.__content_lock.release()

    def get(self):
        """"""
        self.__content_lock.acquire()
        content = None
        if self.__content_is_new:
            self.__content_is_new = False
            content = self.__content
        self.__content_lock.release()

        return content


class TestControllerServer(unittest.TestCase):
    """"""
    def __init__(self, *arguments, **keyword_arguments):
        """"""
        super(TestControllerServer, self).__init__(*arguments, **keyword_arguments)
        rospy.init_node(DEFAULT_TEST_NAME)
        
        self.__server_url = rospy.get_param(rospy.get_name() + "/server_url")
        self.__port = int(rospy.get_param(rospy.get_name() + "/port"))
        wheel_instructions_topic = rospy.get_param(
            rospy.get_name() + "/wheel_instructions_topic",
        )
        front_arm_instructions_topic = rospy.get_param(
            rospy.get_name() + "/front_arm_instructions_topic",
        )
        back_arm_instructions_topic = rospy.get_param(
            rospy.get_name() + "/back_arm_instructions_topic",
        )
        front_drum_instructions_topic = rospy.get_param(
            rospy.get_name() + "/front_drum_instructions_topic",
        )
        back_drum_instructions_topic = rospy.get_param(
            rospy.get_name() + "/back_drum_instructions_topic",
        )
        autonomous_toggles_topic = "/autonomous_toggles"
        target_coordinates_topic = "/target_coordinates"
        startup_delay = float(
            rospy.get_param(rospy.get_name() + "/startup_delay"),
        )
        self.__communication_delay = float(
            rospy.get_param(rospy.get_name() + "/communication_delay"),
        )

        self.__instructions = {
            "wheel_instruction" : Instruction(),
            "front_arm_instruction" : Instruction(),
            "back_arm_instruction" : Instruction(),
            "front_drum_instruction" : Instruction(),
            "back_drum_instruction" : Instruction(),
            "autonomous_toggles" : Instruction(),
            "target_coordinates" : Instruction(),
        }

        rospy.Subscriber(
            wheel_instructions_topic,
            geometry_msgs.msg.Twist,
            callback=self.__instructions["wheel_instruction"].update,
        )
        rospy.Subscriber(
            front_arm_instructions_topic,
            std_msgs.msg.Float32,
            callback=self.__instructions["front_arm_instruction"].update,
        )
        rospy.Subscriber(
            back_arm_instructions_topic,
            std_msgs.msg.Float32,
            callback=self.__instructions["back_arm_instruction"].update,
        )
        rospy.Subscriber(
            front_drum_instructions_topic,
            std_msgs.msg.Float32,
            callback=self.__instructions["front_drum_instruction"].update,
        )
        rospy.Subscriber(
            back_drum_instructions_topic,
            std_msgs.msg.Float32,
            callback=self.__instructions["back_drum_instruction"].update,
        )
        rospy.Subscriber(
            autonomous_toggles_topic,
            std_msgs.msg.Int8,
            callback=self.__instructions["autonomous_toggles"].update,
        )
        rospy.Subscriber(
            target_coordinates_topic,
            geometry_msgs.msg.Point,
            callback=self.__instructions["target_coordinates"].update,
        )

        # Sleep for a bit to give ROS and all other nodes time to start up.
        time.sleep(startup_delay)

    def __post_and_sleep(self, payload):
        """"""
        connection = httplib.HTTPConnection(self.__server_url, self.__port)
        connection.request("POST", "", json.dumps(payload), POST_HEADER)
        time.sleep(self.__communication_delay)
        #connection.close()

    def test_simple_instruction(self):
        """"""
        self.assertEqual(self.__instructions["front_arm_instruction"].get(), None)
        self.__post_and_sleep({"front_arm_instruction" : 1.0})
        instruction = self.__instructions["front_arm_instruction"].get()
        self.assertNotEqual(instruction, None)
        self.assertEqual(instruction.data, 1.0)

    def test_complex_instruction(self):
        """"""
        self.assertEqual(self.__instructions["back_arm_instruction"].get(), None)
        self.assertEqual(self.__instructions["front_drum_instruction"].get(), None)
        self.assertEqual(self.__instructions["back_drum_instruction"].get(), None)
        self.assertEqual(self.__instructions["wheel_instruction"].get(), None)
        self.assertEqual(self.__instructions["autonomous_toggles"].get(), None)
        self.assertEqual(self.__instructions["target_coordinates"].get(), None)


# Start this node with some default values.
rostest.rosrun(
    PACKAGE_NAME,
    DEFAULT_TEST_NAME,
    TestControllerServer,
)
